[gd_resource type="VisualShader" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=3]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=4]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.25 ]
operator = 2

[sub_resource type="OpenSimplexNoise" id=5]
period = 9.4
persistence = 0.447
lacunarity = 1.38

[sub_resource type="NoiseTexture" id=6]
width = 64
height = 64
seamless = true
noise = SubResource( 5 )

[sub_resource type="VisualShaderNodeTexture" id=7]
output_port_for_preview = 0
texture = SubResource( 6 )

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorConstant" id=9]
constant = Color( 0.0732994, 0.100534, 0.893555, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=10]
operator = 6

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorDecompose" id=13]

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Color:4
	vec3 n_out4p0 = vec3(0.073299, 0.100534, 0.893555);
	float n_out4p1 = 1.000000;

// Input:8
	float n_out8p0 = TIME;

// ScalarFunc:7
	float n_out7p0 = sin(n_out8p0);

// ScalarOp:13
	float n_in13p1 = 0.25000;
	float n_out13p0 = n_out7p0 * n_in13p1;

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:9
	float n_out9p0 = n_out3p0.x;
	float n_out9p1 = n_out3p0.y;
	float n_out9p2 = n_out3p0.z;

// ScalarOp:11
	float n_out11p0 = n_out13p0 + n_out9p0;

// ScalarOp:12
	float n_out12p0 = n_out13p0 + n_out9p1;

// VectorCompose:10
	vec3 n_out10p0 = vec3(n_out11p0, n_out12p0, n_out9p2);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out10p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ColorOp:6
	vec3 n_out6p0 = vec3(1.0) - (vec3(1.0) - n_out4p0) / (n_out2p0);

// Output:0
	COLOR.rgb = n_out6p0;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 460, 200 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( 160, 200 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -500, 340 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( 180, 120 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( 300, 140 )
nodes/fragment/7/node = SubResource( 11 )
nodes/fragment/7/position = Vector2( -540, 140 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( -700, 140 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( -360, 340 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 0, 300 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -160, 140 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -160, 300 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -360, 120 )
nodes/fragment/connections = PoolIntArray( 2, 0, 6, 1, 4, 0, 6, 0, 6, 0, 0, 0, 8, 0, 7, 0, 3, 0, 9, 0, 9, 2, 10, 2, 9, 0, 11, 1, 10, 0, 2, 0, 11, 0, 10, 0, 9, 1, 12, 1, 12, 0, 10, 1, 7, 0, 13, 0, 13, 0, 11, 0, 13, 0, 12, 0 )
