[gd_resource type="VisualShader" load_steps=7 format=2]

[sub_resource type="OpenSimplexNoise" id=1]
period = 1.6
persistence = 0.307
lacunarity = 0.91

[sub_resource type="NoiseTexture" id=2]
width = 64
height = 64
seamless = true
noise = SubResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=3]
output_port_for_preview = 0
texture = SubResource( 2 )

[sub_resource type="VisualShaderNodeColorConstant" id=4]
constant = Color( 0.250732, 0.617188, 0, 1 )

[sub_resource type="VisualShaderNodeColorOp" id=5]
output_port_for_preview = 0
operator = 4

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "uv"

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_2;



void vertex() {
// Output:0

}

void fragment() {
// Color:3
	vec3 n_out3p0 = vec3(0.250732, 0.617188, 0.000000);
	float n_out3p1 = 1.000000;

// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out5p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// ColorOp:4
	vec3 n_out4p0;
	{
		float base = n_out3p0.x;
		float blend = n_out2p0.x;
		if (base < 0.5) {
			n_out4p0.x = 2.0 * base * blend;
		} else {
			n_out4p0.x = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.y;
		float blend = n_out2p0.y;
		if (base < 0.5) {
			n_out4p0.y = 2.0 * base * blend;
		} else {
			n_out4p0.y = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}
	{
		float base = n_out3p0.z;
		float blend = n_out2p0.z;
		if (base < 0.5) {
			n_out4p0.z = 2.0 * base * blend;
		} else {
			n_out4p0.z = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		}
	}

// Output:0
	COLOR.rgb = n_out4p0;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( 0, 160 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( 60, 80 )
nodes/fragment/4/node = SubResource( 5 )
nodes/fragment/4/position = Vector2( 220, 80 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( -162.908, 259.857 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 4, 1, 4, 0, 0, 0, 5, 0, 2, 0 )
